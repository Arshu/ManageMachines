<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyNatsClient</name>
    </assembly>
    <members>
        <member name="P:MyNatsClient.ConnectionInfo.Hosts">
            <summary>
            Gets the hosts that a client can randomly connect to.
            </summary>
        </member>
        <member name="P:MyNatsClient.ConnectionInfo.Name">
            <summary>
            Gets the connection name which is used when a connection
            is established against the NATS server.
            </summary>
        </member>
        <member name="P:MyNatsClient.ConnectionInfo.UseInboxRequests">
            <summary>
            When enabled (default), one single global Inbox-subsription is
            initiated against the NATS-Server upon first request. After that,
            all responses are reported back to that inbox.
            If disabled, one subsription is initated and disposed per request.
            </summary>
        </member>
        <member name="P:MyNatsClient.ConnectionInfo.AutoRespondToPing">
            <summary>
            Gets or sets value indicating if client should
            respond to server pings automatically.
            Default is true.
            </summary>
        </member>
        <member name="P:MyNatsClient.ConnectionInfo.AutoReconnectOnFailure">
            <summary>
            Gets or sets value indicating if client should
            try and auto reconnect on failure.
            Default is false.
            </summary>
        </member>
        <member name="P:MyNatsClient.ConnectionInfo.Credentials">
            <summary>
            Gets or sets the credentials used when connecting against the hosts.
            </summary>
            <remarks>You can specify host specific credentials on each host.</remarks>
        </member>
        <member name="P:MyNatsClient.ConnectionInfo.Verbose">
            <summary>
            Gets or sets value if verbose output should be used.
            Default is false.
            </summary>
        </member>
        <member name="P:MyNatsClient.ConnectionInfo.PubFlushMode">
            <summary>
            Gets or sets value determining how the clients flush behavior
            should be when sending messages. E.g. when Pub or PubAsync is called.
            Default is Auto (will Flush after each Pub or PubAsync).
            </summary>
        </member>
        <member name="P:MyNatsClient.ConnectionInfo.RequestTimeoutMs">
            <summary>
            Gets or sets the default value to use for request timeout.
            </summary>
        </member>
        <member name="P:MyNatsClient.ConnectionInfo.ClientCertificates">
            <summary>
            Gets or sets certificate collection used when authenticating the client against the server
            when the server is configured to use TLS and to verify the clients.
            If the server is onyl configured to use TLS but not configured to verfify the
            clients, no client certificates need to be provided.
            </summary>
        </member>
        <member name="P:MyNatsClient.ConnectionInfo.ServerCertificateValidation">
            <summary>
            Gets or sets custom handler to use for verifying the server certificate.
            This is used if the server is configured to use TLS.
            </summary>
        </member>
        <member name="P:MyNatsClient.ConnectionInfo.SocketOptions">
            <summary>
            Gets or sets <see cref="P:MyNatsClient.ConnectionInfo.SocketOptions"/> to use when creating the clients
            underlying socket via <see cref="T:MyNatsClient.ISocketFactory"/>.
            </summary>
        </member>
        <member name="F:MyNatsClient.DisconnectReason.ByUser">
            <summary>
            Disconnect was caused by invoke by user.
            </summary>
        </member>
        <member name="F:MyNatsClient.DisconnectReason.DueToFailure">
            <summary>
            Disconnect was caused by client failure.
            </summary>
        </member>
        <member name="T:MyNatsClient.IConsumerFactory">
            <summary>
            Responsible for returning a Task that continiously runs the consumer.
            </summary>
        </member>
        <member name="P:MyNatsClient.INatsClient.Id">
            <summary>	
            ClientId. Currently not used more than for user convenience,	
            like if you have multiple clients running and want to keep	
            them apart.	
            </summary>	
        </member>
        <member name="P:MyNatsClient.INatsClient.Events">
            <summary>
            Stream of client events that mostly concerns client state changes.
            E.g.
            <see cref="T:MyNatsClient.Events.ClientConnected"/>,
            <see cref="T:MyNatsClient.Events.ClientDisconnected"/>,
            <see cref="T:MyNatsClient.Events.ClientWorkerFailed"/>.
            </summary>
        </member>
        <member name="P:MyNatsClient.INatsClient.OpStream">
            <summary>
            Stream of all incoming Ops.
            E.g.
            <see cref="T:MyNatsClient.Ops.ErrOp"/>,
            <see cref="T:MyNatsClient.Ops.InfoOp"/>,
            <see cref="T:MyNatsClient.Ops.PingOp"/>,
            <see cref="T:MyNatsClient.Ops.PongOp"/>,
            <see cref="T:MyNatsClient.Ops.MsgOp"/>
            </summary>
        </member>
        <member name="P:MyNatsClient.INatsClient.MsgOpStream">
            <summary>
            Stream of all incoming <see cref="T:MyNatsClient.Ops.MsgOp"/>.
            </summary>
        </member>
        <member name="P:MyNatsClient.INatsClient.IsConnected">
            <summary>
            Gets value indicating if the client is connected or not.
            </summary>
        </member>
        <member name="M:MyNatsClient.INatsClient.ConnectAsync">
            <summary>
            Connects the client to one of the <see cref="T:MyNatsClient.Host"/>
            specified in <see cref="T:MyNatsClient.ConnectionInfo"/>.
            </summary>
        </member>
        <member name="M:MyNatsClient.INatsClient.Disconnect">
            <summary>
            Disconnects the client.
            </summary>
        </member>
        <member name="M:MyNatsClient.INatsClient.Flush">
            <summary>
            Flushes the write stream.
            </summary>
        </member>
        <member name="M:MyNatsClient.INatsClient.FlushAsync">
            <summary>
            Async flush of write stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyNatsClient.INatsClient.Ping">
            <summary>
            Sync send of a Ping message to the server, which then
            should reply with a Pong.
            </summary>
        </member>
        <member name="M:MyNatsClient.INatsClient.PingAsync">
            <summary>
            Async send of a Ping message to the server, which then
            should reply with a Pong.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyNatsClient.INatsClient.Pong">
            <summary>
            Sync send of a Pong message to the server as a reply on servers Ping, so that you
            the server does not cut this client off.
            This is taken care automatically by the client if you specify
            <see cref="P:MyNatsClient.ConnectionInfo.AutoRespondToPing"/>.
            </summary>
        </member>
        <member name="M:MyNatsClient.INatsClient.PongAsync">
            <summary>
            Async send of a Pong message to the server as a reply on servers Ping, so that you
            the server does not cut this client off.
            This is taken care automatically by the client if you specify
            <see cref="P:MyNatsClient.ConnectionInfo.AutoRespondToPing"/>.
            </summary>
        </member>
        <member name="M:MyNatsClient.INatsClient.Pub(System.String,System.String,System.String)">
            <summary>
            Sync Publish of a message.
            </summary>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="replyTo"></param>
        </member>
        <member name="M:MyNatsClient.INatsClient.Pub(System.String,System.ReadOnlyMemory{System.Byte},System.String)">
            <summary>
            Sync Publish of a message.
            </summary>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="replyTo"></param>
        </member>
        <member name="M:MyNatsClient.INatsClient.PubAsync(System.String,System.String,System.String)">
            <summary>
            Async Publish of a message.
            </summary>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="replyTo"></param>
            <returns></returns>
        </member>
        <member name="M:MyNatsClient.INatsClient.PubAsync(System.String,System.ReadOnlyMemory{System.Byte},System.String)">
            <summary>
            Async Publish of a message.
            </summary>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="replyTo"></param>
            <returns></returns>
        </member>
        <member name="M:MyNatsClient.INatsClient.PubMany(System.Action{MyNatsClient.IPublisher})">
            <summary>
            Gives access to a publisher that will be running in
            a sync locked scope until your injected delegate
            is done.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:MyNatsClient.INatsClient.PubManyAsync(System.Func{MyNatsClient.IAsyncPublisher,System.Threading.Tasks.Task})">
            <summary>
            Gives access to a publisher that will be running in
            an async locked scope until your injected delegate
            is done.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:MyNatsClient.INatsClient.RequestAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Async request response.
            </summary>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MyNatsClient.INatsClient.RequestAsync(System.String,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Async request response.
            </summary>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MyNatsClient.INatsClient.Sub(System.String)">
            <summary>
            Creates a <see cref="T:MyNatsClient.ISubscription"/> which sets up a subscription against the NATS server.
            </summary>
            <param name="subject">The subject that this subscription should be consuming.</param>
            <returns></returns>
            <remarks>You still need to setup a manual subscription against <see cref="P:MyNatsClient.INatsClient.MsgOpStream"/> with a handler.</remarks>
        </member>
        <member name="M:MyNatsClient.INatsClient.Sub(System.String,System.Func{MyNatsClient.INatsObservable{MyNatsClient.Ops.MsgOp},System.IDisposable})">
            <summary>
            Creates a <see cref="T:MyNatsClient.ISubscription"/> which sets up a subscription against the NATS server.
            Also sets up a subscripion that consumes <see cref="T:MyNatsClient.Ops.MsgOp"/>.
            </summary>
            <param name="subject">The subject that this subscription should be consuming.</param>
            <param name="subscriptionFactory">Should return a disposable subscription that will be invoked when unsub is perfored.</param>
            <returns></returns>
        </member>
        <member name="M:MyNatsClient.INatsClient.Sub(MyNatsClient.SubscriptionInfo)">
            <summary>
            Creates a <see cref="T:MyNatsClient.ISubscription"/> which sets up a subscription against the NATS server.
            </summary>
            <param name="subscriptionInfo">The Subscrition info indicating what subject etc. that this subscription should be consuming.</param>
            <returns></returns>
            <remarks>You still need to setup a manual subscription against <see cref="P:MyNatsClient.INatsClient.MsgOpStream"/> with a handler.</remarks>
        </member>
        <member name="M:MyNatsClient.INatsClient.Sub(MyNatsClient.SubscriptionInfo,System.Func{MyNatsClient.INatsObservable{MyNatsClient.Ops.MsgOp},System.IDisposable})">
            <summary>
            Creates a <see cref="T:MyNatsClient.ISubscription"/> which sets up a subscription against the NATS server.
            Also sets up a subscripion that consumes <see cref="T:MyNatsClient.Ops.MsgOp"/> stream.
            </summary>
            <param name="subscriptionInfo">The Subscrition info indicating what subject etc. that this subscription should be consuming.</param>
            <param name="subscriptionFactory">Should return a disposable subscription that will be invoked when unsub is perfored.</param>
            <returns></returns>
        </member>
        <member name="M:MyNatsClient.INatsClient.SubAsync(System.String)">
            <summary>
            Creates a <see cref="T:MyNatsClient.ISubscription"/> which sets up a subscription against the NATS server.
            </summary>
            <param name="subject">The subject that this subscription should be consuming.</param>
            <returns></returns>
            <remarks>You still need to setup a manual subscription against <see cref="P:MyNatsClient.INatsClient.MsgOpStream"/> with a handler.</remarks>
        </member>
        <member name="M:MyNatsClient.INatsClient.SubAsync(System.String,System.Func{MyNatsClient.INatsObservable{MyNatsClient.Ops.MsgOp},System.IDisposable})">
            <summary>
            Creates a <see cref="T:MyNatsClient.ISubscription"/> which sets up a subscription against the NATS server.
            Also sets up a subscripion that consumes <see cref="T:MyNatsClient.Ops.MsgOp"/> stream.
            </summary>
            <param name="subject">The subject that this subscription should be consuming.</param>
            <param name="subscriptionFactory">Should return a disposable subscription that will be invoked when unsub is perfored.</param>
            <returns></returns>
        </member>
        <member name="M:MyNatsClient.INatsClient.SubAsync(MyNatsClient.SubscriptionInfo)">
            <summary>
            Creates a <see cref="T:MyNatsClient.ISubscription"/> which sets up a subscription against the NATS server.
            </summary>
            <param name="subscriptionInfo">The Subscrition info indicating what subject etc. that this subscription should be consuming.</param>
            <returns></returns>
            <remarks>You still need to setup a manual subscription against <see cref="P:MyNatsClient.INatsClient.MsgOpStream"/> with a handler.</remarks>
        </member>
        <member name="M:MyNatsClient.INatsClient.SubAsync(MyNatsClient.SubscriptionInfo,System.Func{MyNatsClient.INatsObservable{MyNatsClient.Ops.MsgOp},System.IDisposable})">
            <summary>
            Creates a <see cref="T:MyNatsClient.ISubscription"/> which sets up a subscription against the NATS server.
            Also sets up a subscripion that consumes <see cref="T:MyNatsClient.Ops.MsgOp"/> stream.
            </summary>
            <param name="subscriptionInfo">The Subscrition info indicating what subject etc. that this subscription should be consuming.</param>
            <param name="subscriptionFactory">Should return a disposable subscription that will be invoked when unsub is perfored.</param>
            <returns></returns>
        </member>
        <member name="M:MyNatsClient.INatsClient.Unsub(MyNatsClient.ISubscription)">
            <summary>
            Unsubscribes from the server as well as any previosly associated subscription
            (handler, observer) against <see cref="P:MyNatsClient.INatsClient.MsgOpStream"/>.
            </summary>
            <param name="subscription"></param>
        </member>
        <member name="M:MyNatsClient.INatsClient.Unsub(MyNatsClient.SubscriptionInfo)">
            <summary>
            Unsubscribes from the server as well as any previosly created <see cref="T:MyNatsClient.ISubscription"/>
            with any associated subscription (handler, observer) against <see cref="P:MyNatsClient.INatsClient.MsgOpStream"/>.
            </summary>
            <param name="subscriptionInfo"></param>
        </member>
        <member name="M:MyNatsClient.INatsClient.UnsubAsync(MyNatsClient.ISubscription)">
            <summary>
            Unsubscribes from the server as well as any previosly associated subscription
            (handler, observer) against <see cref="P:MyNatsClient.INatsClient.MsgOpStream"/>.
            </summary>
            <param name="subscription"></param>
        </member>
        <member name="M:MyNatsClient.INatsClient.UnsubAsync(MyNatsClient.SubscriptionInfo)">
            <summary>
            Unsubscribes from the server as well as any previosly created <see cref="T:MyNatsClient.ISubscription"/>
            with any associated subscription (handler, observer) against <see cref="P:MyNatsClient.INatsClient.MsgOpStream"/>.
            </summary>
            <param name="subscriptionInfo"></param>
        </member>
        <member name="M:MyNatsClient.INatsConnectionManager.OpenConnectionAsync(MyNatsClient.ConnectionInfo,System.Threading.CancellationToken)">
            <summary>
            Tries to establish a connection to any of the specified hosts in the
            sent <see cref="T:MyNatsClient.ConnectionInfo"/>.
            </summary>
            <param name="connectionInfo"></param>
            <param name="cancellationToken"></param>
            <returns>Connection and any received <see cref="T:MyNatsClient.IOp"/> during the connection phase.</returns>
        </member>
        <member name="T:MyNatsClient.ISubscription">
            <inheritdoc />
            <summary>
            Represents a subscription against a NATS broker as well
            as an associated message handler against the in-process
            observable message stream.
            </summary>
            <remarks>
            If you forget to explicitly dispose, the <see cref="T:MyNatsClient.INatsClient" />
            that created this subscribtion, will clean the subscription when it is disposed.
            </remarks>
        </member>
        <member name="T:MyNatsClient.NatsOpStreamReader">
            <summary>
            Reads <see cref="T:MyNatsClient.IOp"/> from a Stream.
            </summary>
            <remarks>
            Intentionally not locking so currently not safe for parallel use.
            </remarks>
        </member>
        <member name="T:MyNatsClient.PubFlushMode">
            <summary>
            Determines the clients flush behavior when sending messages.
            E.g. when Pub or PubAsync is called.
            </summary>
        </member>
        <member name="F:MyNatsClient.PubFlushMode.Auto">
            <summary>
            Will Flush after each Pub or PubAsync
            </summary>
        </member>
        <member name="F:MyNatsClient.PubFlushMode.Manual">
            <summary>
            Will Flush when you call Flush or FlushAsync
            </summary>
        </member>
        <member name="P:MyNatsClient.SocketOptions.AddressType">
            <summary>
            Gets or sets the type of address to use for the Socket.
            </summary>
        </member>
        <member name="P:MyNatsClient.SocketOptions.ReceiveBufferSize">
            <summary>
            Gets or sets the ReceiveBufferSize of the Socket.
            Will also adjust the buffer size of the underlying <see cref="T:System.IO.BufferedStream"/>
            that is used by the consumer.
            </summary>
        </member>
        <member name="P:MyNatsClient.SocketOptions.SendBufferSize">
            <summary>
            Gets or sets the SendBufferSize of the Socket.
            Will also adjust the buffer size of the underlying <see cref="T:System.IO.BufferedStream"/>
            that is used by the publisher.
            </summary>
        </member>
        <member name="P:MyNatsClient.SocketOptions.ReceiveTimeoutMs">
            <summary>
            Gets or sets the Recieve timeout in milliseconds for the Socket.
            When it times out, the client will look at internal settings
            to determine if it should fail or first try and ping the server.
            </summary>
        </member>
        <member name="P:MyNatsClient.SocketOptions.SendTimeoutMs">
            <summary>
            Gets or sets the Send timeout in milliseconds for the Socket.
            </summary>
        </member>
        <member name="P:MyNatsClient.SocketOptions.ConnectTimeoutMs">
            <summary>
            Gets or sets the Connect timeout in milliseconds for the Socket.
            </summary>
        </member>
        <member name="P:MyNatsClient.SocketOptions.UseNagleAlgorithm">
            <summary>
            Gets or sets value indicating if the Nagle algoritm should be used or not
            on the created Socket.
            </summary>
        </member>
        <member name="P:MyNatsClient.SubscriptionInfo.Subject">
            <summary>
            Gets the subject name the subscriber is subscribed to.
            </summary>
        </member>
        <member name="P:MyNatsClient.SubscriptionInfo.QueueGroup">
            <summary>
            Gets the optionally specified queue group that the subscriber will join.
            </summary>
        </member>
        <member name="P:MyNatsClient.SubscriptionInfo.MaxMessages">
            <summary>
            Gets the number of messages the subscriber will wait before automatically unsubscribing.
            </summary>
        </member>
        <member name="P:MyNatsClient.SubscriptionInfo.HasWildcardSubject">
            <summary>
            Gets a value indicating if this subscription is a wild card subscription.
            </summary>
        </member>
        <member name="M:MyNatsClient.SubscriptionInfo.#ctor(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a subscription info object.
            </summary>
            <param name="subject">The subject name to subscribe to</param>
            <param name="queueGroup">If specified, the subscriber will join this queue group</param>
            <param name="maxMessages">Number of messages to wait for before automatically unsubscribing</param>
        </member>
    </members>
</doc>
